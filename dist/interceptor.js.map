{"version":3,"file":"interceptor.js","mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://hockeynation/./src/interceptor.js"],"sourcesContent":["(function () {\n  // intercept XHR\n  const originalOpen = XMLHttpRequest.prototype.open;\n  const originalSend = XMLHttpRequest.prototype.send;\n\n  XMLHttpRequest.prototype.open = function (method, url, ...rest) {\n    this._interceptedUrl = url;\n    return originalOpen.apply(this, arguments);\n  };\n\n  XMLHttpRequest.prototype.send = function (...args) {\n    if (\n      this._interceptedUrl &&\n      this._interceptedUrl.includes(\"/api/team/\") &&\n      this._interceptedUrl.includes(\"/roster\")\n    ) {\n      const originalOnReadyState = this.onreadystatechange;\n\n      this.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n          try {\n            const data = JSON.parse(this.responseText);\n            console.log(\"INTERCEPTED ROSTER DATA:\", data);\n\n            // Call data processing here\n            // Maybe split if statements to become a routing table for different request processing\n          } catch (e) {\n            console.error(\"Error parsing response:\", e);\n          }\n        }\n\n        if (originalOnReadyState) {\n          originalOnReadyState.apply(this, arguments);\n        }\n      };\n    }\n\n    return originalSend.apply(this, args);\n  };\n\n  // intercept fetch as well, although I don't think this is used\n  const originalFetch = window.fetch;\n  window.fetch = async function (resource, init) {\n    // handle strings & request obj\n    const url = typeof resource === \"string\" ? resource : resource.url;\n    const response = await originalFetch.apply(this, arguments);\n\n    // split in routing table\n    if (url && url.includes(\"/api/team/\") && url.includes(\"/roster\")) {\n      try {\n        const clonedResponse = response.clone();\n        const data = await clonedResponse.json();\n        console.log(\"INTERCEPTED ROSTER DATA (fetch):\", data);\n      } catch (e) {\n        console.error(\"Error processing fetch response:\", e);\n      }\n    }\n    return response;\n  };\n})();\n"],"names":[],"sourceRoot":""}