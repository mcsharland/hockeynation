{"version":3,"file":"contentScript.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChiBAAiB;AACjB;AACA,iDAAiD,OAAO;AACxD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,GAAG;AACrE;AACA;AACA;AACA;AACA;AACA,uEAAuE,GAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,CAAC;;;;;;;;UE/lBD;UACA;UACA;UACA;UACA","sources":["webpack://hockeynation/./src/contentScript.ts","webpack://hockeynation/webpack/before-startup","webpack://hockeynation/webpack/startup","webpack://hockeynation/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst calculateOVR = (stats) => {\n    const statsValues = Object.keys(stats).map((key) => stats[key]);\n    const sum = statsValues.reduce((acc, stat) => acc + stat.rating, 0);\n    const avg = sum / statsValues.length;\n    let excess = 0;\n    for (const stat of statsValues) {\n        if (stat.rating > avg) {\n            excess += stat.rating - avg;\n        }\n    }\n    const correctedSum = sum + excess;\n    const correctedAverage = correctedSum / statsValues.length;\n    const ovr = Math.round(correctedAverage * 10);\n    return ovr;\n};\nconst calculateMinStats = (stats) => {\n    const minStats = JSON.parse(JSON.stringify(stats));\n    let weakestRating = 10;\n    let highestNonStrongestRating = 0;\n    for (const key of Object.keys(minStats)) {\n        const stat = minStats[key];\n        if (stat.strength === \"weakest\") {\n            weakestRating = stat.rating;\n        }\n    }\n    for (const key of Object.keys(minStats)) {\n        const stat = minStats[key];\n        minStats[key].rating = stat.hasRedPuck ? stat.rating : stat.rating + 1;\n        if (stat.strength !== \"strongest\") {\n            highestNonStrongestRating = Math.max(highestNonStrongestRating, minStats[key].rating);\n        }\n    }\n    for (const key of Object.keys(minStats)) {\n        const stat = minStats[key];\n        if (stat.strength === \"strongest\" &&\n            stat.rating < highestNonStrongestRating) {\n            minStats[key].rating = highestNonStrongestRating;\n        }\n    }\n    for (const key of Object.keys(minStats)) {\n        if (minStats[key].rating < weakestRating) {\n            minStats[key].rating = weakestRating;\n        }\n        if (minStats[key].rating < 4) {\n            minStats[key].rating = 4;\n        }\n    }\n    return minStats;\n};\nconst calculateMaxStats = (stats) => {\n    const maxStats = JSON.parse(JSON.stringify(stats));\n    let strongestRating = 10;\n    let lowestNonWeakestRating = 10;\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (stat.strength === \"strongest\") {\n            strongestRating = Math.min(strongestRating, stat.hasRedPuck ? stat.rating : 10);\n        }\n    }\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (!stat.hasRedPuck && stat.rating < strongestRating) {\n            maxStats[key].rating = strongestRating;\n        }\n        if (stat.strength !== \"weakest\") {\n            lowestNonWeakestRating = Math.min(lowestNonWeakestRating, maxStats[key].rating);\n        }\n    }\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (stat.strength === \"strongest\" && !stat.hasRedPuck && stat.rating < 10) {\n            maxStats[key].rating = 10;\n        }\n    }\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (stat.strength === \"weakest\" && stat.rating > lowestNonWeakestRating) {\n            maxStats[key].rating = lowestNonWeakestRating;\n        }\n        if (maxStats[key].rating < 4) {\n            maxStats[key].rating = 4;\n        }\n    }\n    return maxStats;\n};\nconst parseStatsTable = () => {\n    const puck = document.querySelector(\"svg.fa-hockey-puck\");\n    if (!puck) {\n        return false;\n    }\n    let ancestor = puck.parentElement;\n    while (ancestor && !ancestor.matches(\"table[data-v-a81c915e]\")) {\n        ancestor = ancestor.parentElement;\n    }\n    const statsTable = ancestor;\n    if (!statsTable) {\n        return false;\n    }\n    const divs = document.querySelectorAll(\"div.card-header\");\n    const ovrElement = document.querySelector(\"div.polygon.select-none text\");\n    const baseOVR = ovrElement ? ovrElement.textContent : null;\n    const updateOVR = (ovr) => {\n        var _a;\n        const ovrElement = document.querySelector(\"div.polygon.select-none text\");\n        if (ovrElement) {\n            ovrElement.textContent = ovr.toString();\n            const polygonElement = (_a = ovrElement.parentElement) === null || _a === void 0 ? void 0 : _a.querySelector(\"polygon\");\n            if (polygonElement) {\n                let fillColor = \"\";\n                if (ovr <= 39) {\n                    fillColor = \"#f56565\";\n                }\n                else if (ovr >= 40 && ovr <= 54) {\n                    fillColor = \"#ed8936\";\n                }\n                else if (ovr >= 55 && ovr <= 69) {\n                    fillColor = \"#1995AD\";\n                }\n                else if (ovr >= 70 && ovr <= 79) {\n                    fillColor = \"#10b981\";\n                }\n                else if (ovr >= 80) {\n                    fillColor = \"#383839\";\n                }\n                polygonElement.setAttribute(\"fill\", fillColor);\n            }\n        }\n    };\n    const statsRows = statsTable.querySelectorAll(\"tbody tr\");\n    if (!statsRows.length) {\n        return false;\n    }\n    const stats = {};\n    let scoutPlayer = false;\n    statsRows.forEach((row) => {\n        var _a, _b, _c, _d;\n        const statName = ((_b = (_a = row.cells[0]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\";\n        const pucks = row.querySelectorAll(\"svg.fa-hockey-puck\");\n        const ratingText = (_d = (_c = row.cells[row.cells.length - 1]) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.trim();\n        const ratingMatch = ratingText ? ratingText.match(/\\((\\d+)\\)/) : null;\n        if (!scoutPlayer && !ratingMatch) {\n            scoutPlayer = true;\n        }\n        const rating = ratingMatch ? parseInt(ratingMatch[1], 10) : 0;\n        const hasRedPuck = Array.from(pucks).some((puck) => puck.classList.contains(\"max-level\"));\n        stats[statName] = {\n            rating,\n            hasRedPuck,\n            strength: null,\n        };\n    });\n    const talentContainer = document.querySelector(\"body\");\n    if (talentContainer) {\n        const talentText = talentContainer.textContent || \"\";\n        const strongestMatch = talentText.match(/Strongest talents of .+ are (\\w+ and \\w+)/);\n        const weakestMatch = talentText.match(/weakest talent is (\\w+)/);\n        const strongestTalents = strongestMatch\n            ? strongestMatch[1].split(\" and \")\n            : [];\n        const weakestTalent = weakestMatch ? weakestMatch[1] : \"\";\n        strongestTalents.forEach((talent) => {\n            if (stats[talent]) {\n                stats[talent].strength = \"strongest\";\n            }\n        });\n        if (weakestTalent && stats[weakestTalent]) {\n            stats[weakestTalent].strength = \"weakest\";\n        }\n    }\n    const minStats = calculateMinStats(stats);\n    const maxStats = calculateMaxStats(stats);\n    const updateHockeyPucks = (option) => {\n        statsRows.forEach((row) => {\n            var _a, _b;\n            const statName = ((_b = (_a = row.cells[0]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\";\n            const pucksCell = row.cells[1];\n            const pucks = pucksCell.querySelectorAll(\"svg.fa-hockey-puck\");\n            const ratingCell = row.cells[2];\n            const ratingSpan = ratingCell === null || ratingCell === void 0 ? void 0 : ratingCell.querySelector(\"span\");\n            const stat = stats[statName];\n            if (stat) {\n                let rating = stat.rating;\n                if (option === \"Min\") {\n                    rating = minStats[statName].rating;\n                }\n                else if (option === \"Max\") {\n                    rating = maxStats[statName].rating;\n                }\n                pucks.forEach((puck, index) => {\n                    puck.classList.remove(\"text-blue-400\");\n                    if (index < rating) {\n                        puck.classList.remove(\"text-gray-300\");\n                        if (index >= stat.rating) {\n                            puck.classList.add(\"text-blue-400\");\n                        }\n                    }\n                    else {\n                        puck.classList.add(\"text-gray-300\");\n                    }\n                    if (index === rating - 1 && stat.hasRedPuck) {\n                        puck.classList.add(\"max-level\");\n                    }\n                    else {\n                        puck.classList.remove(\"max-level\");\n                    }\n                });\n                if (ratingSpan) {\n                    ratingSpan.textContent = `(${rating})`;\n                }\n            }\n        });\n        let ovr = calculateOVR(stats);\n        if (option === \"Min\") {\n            ovr = calculateOVR(minStats);\n        }\n        else if (option === \"Max\") {\n            ovr = calculateOVR(maxStats);\n        }\n        if (option !== \"Default\" || !scoutPlayer) {\n            updateOVR(ovr);\n        }\n        else {\n            updateOVR(baseOVR !== null ? parseInt(baseOVR) : ovr);\n        }\n    };\n    divs.forEach((div) => {\n        if (div.textContent && div.textContent.trim() === \"Skills\") {\n            const dropdown = document.createElement(\"select\");\n            dropdown.classList.add(\"stats-dropdown\");\n            dropdown.style.marginLeft = \"auto\";\n            dropdown.style.fontSize = \"12px\";\n            dropdown.style.padding = \"2px\";\n            dropdown.style.border = \"none\";\n            dropdown.style.backgroundColor = \"#fff\";\n            dropdown.style.color = \"#000\";\n            dropdown.style.width = \"85px\";\n            dropdown.style.height = \"18px\";\n            dropdown.style.lineHeight = \"18px\";\n            dropdown.style.paddingTop = \"0px\";\n            dropdown.style.paddingBottom = \"0px\";\n            dropdown.style.paddingRight = \"21px\";\n            dropdown.style.borderRadius = \"2px\";\n            dropdown.addEventListener(\"change\", (event) => {\n                const selectElement = event.target;\n                const selectedOption = selectElement.value;\n                updateHockeyPucks(selectedOption);\n            });\n            const options = [\"Default\", \"Min\", \"Max\"];\n            options.forEach((option) => {\n                const optionElement = document.createElement(\"option\");\n                optionElement.value = option;\n                optionElement.textContent = option;\n                optionElement.style.textAlign = \"center\";\n                dropdown.appendChild(optionElement);\n            });\n            div.appendChild(dropdown);\n        }\n    });\n    updateHockeyPucks(\"Default\");\n    return true;\n};\nconst getStatsForPosition = (position) => {\n    const firstPosition = position.split(\"/\")[0];\n    if (firstPosition === \"G\") {\n        return [\"REF\", \"END\", \"POS\", \"PAD\", \"GLO\", \"BLO\", \"STK\"];\n    }\n    else if (firstPosition === \"LD\" || firstPosition === \"RD\") {\n        return [\"SKA\", \"END\", \"PWR\", \"SHO\", \"PAS\", \"DEF\", \"CHK\", \"DSC\"];\n    }\n    else {\n        return [\"SKA\", \"END\", \"PWR\", \"SHO\", \"PAS\", \"DEF\", \"CHK\", \"DSC\", \"FOF\"];\n    }\n};\nfunction parsePreferencesTable(preferenceGrid) {\n    const infoButton = document.querySelector('button:has(svg[data-icon=\"table-cells\"])');\n    if (!infoButton) {\n        console.error(\"Could not find the info button\");\n        return;\n    }\n    infoButton.click();\n    const observer = new MutationObserver((mutations, obs) => {\n        const currentGrid = document.querySelector(\".grid.grid-cols-2.gap-x-2\");\n        if (currentGrid) {\n            obs.disconnect();\n            updatePreferences(preferenceGrid, currentGrid).catch((error) => console.error(\"Error updating preferences:\", error));\n        }\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n}\nfunction updatePreferences(originalGrid, currentGrid) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const originalPreferences = {};\n        const currentPreferences = {};\n        // Parse original preferences\n        const originalCheckboxes = originalGrid.querySelectorAll('input[type=\"checkbox\"]');\n        originalCheckboxes.forEach((checkbox) => {\n            originalPreferences[checkbox.id] = checkbox.checked;\n        });\n        // Parse current preferences\n        const currentCheckboxes = currentGrid.querySelectorAll('input[type=\"checkbox\"]');\n        currentCheckboxes.forEach((checkbox) => {\n            currentPreferences[checkbox.id] = checkbox.checked;\n        });\n        // Determine which checkboxes need to be updated\n        const checkboxesToUpdate = [];\n        for (const id in originalPreferences) {\n            if (originalPreferences.hasOwnProperty(id)) {\n                if (currentPreferences[id] !== originalPreferences[id]) {\n                    checkboxesToUpdate.push(id);\n                }\n            }\n        }\n        // Update checkboxes sequentially\n        for (const id of checkboxesToUpdate) {\n            const label = currentGrid.querySelector(`label[for=\"${id}\"]`);\n            if (label) {\n                label.click();\n                // Wait for the change to be reflected\n                yield new Promise((resolve) => {\n                    const checkForChange = () => {\n                        const checkbox = currentGrid.querySelector(`#${id}`);\n                        if (checkbox && checkbox.checked === originalPreferences[id]) {\n                            resolve();\n                        }\n                        else {\n                            setTimeout(checkForChange, 50);\n                        }\n                    };\n                    checkForChange();\n                });\n            }\n        }\n        // Find and click the update button\n        const updateButton = document.querySelector(\"button.btn.btn-blue.flex-grow\");\n        if (updateButton) {\n            updateButton.click();\n        }\n    });\n}\nlet parseDraftCompleted = false;\nconst parseDraftTable = () => {\n    const infoButton = document.querySelector('button:has(svg[data-icon=\"table-cells\"])');\n    if (!infoButton) {\n        console.error(\"Could not find the info button\");\n        return false;\n    }\n    infoButton.click();\n    function findTargetGrid() {\n        return document.querySelector(\".grid.grid-cols-2.gap-x-2\");\n    }\n    function findSelectAllLabel() {\n        return document.querySelector('label[for=\"all\"]');\n    }\n    function findUpdateButton() {\n        return document.querySelector(\"button.btn.btn-blue.flex-grow\");\n    }\n    const observer = new MutationObserver((mutations) => {\n        for (let mutation of mutations) {\n            if (mutation.type === \"childList\") {\n                const targetGrid = findTargetGrid();\n                if (targetGrid) {\n                    observer.disconnect();\n                    const selectAllLabel = findSelectAllLabel();\n                    if (selectAllLabel) {\n                        const checkbox = document.getElementById(\"all\");\n                        if (checkbox && !checkbox.checked) {\n                            selectAllLabel.click();\n                        }\n                    }\n                    const updateButton = findUpdateButton();\n                    if (updateButton) {\n                        updateButton.click();\n                    }\n                    // Use setTimeout to ensure table is updated before extraction\n                    setTimeout(() => {\n                        extractPlayers(targetGrid).catch((error) => console.error(\"Error extracting players:\", error));\n                    }, 500);\n                    return true;\n                }\n            }\n        }\n    });\n    observer.observe(document.body, { childList: true, subtree: true });\n    parseDraftCompleted = true;\n    return true;\n};\nfunction calculateMinStatsAsync(stats) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(calculateMinStats(stats));\n            }, 0);\n        });\n    });\n}\nfunction calculateMaxStatsAsync(stats) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(calculateMaxStats(stats));\n            }, 0);\n        });\n    });\n}\nfunction calculateOVRAsync(stats) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(calculateOVR(stats));\n            }, 0);\n        });\n    });\n}\nfunction extractPlayers(savedPreferencesGrid) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const rows = document.querySelectorAll(\"tbody[data-v-e2e20c3e] tr\");\n        const extractPlayerData = (row) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d, _e;\n            const cells = row.querySelectorAll(\"td\");\n            const id = row.id;\n            const nameElement = cells[1].querySelector(\"a.text-link-primary span.lg\\\\:inline-block\");\n            const name = nameElement ? ((_a = nameElement.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || \"\" : \"\";\n            const positionElement = cells[1].querySelector(\"span.text-gray-600.tracking-tighter span\");\n            const position = positionElement\n                ? ((_b = positionElement.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\"\n                : \"\";\n            const ovrElement = cells[6].querySelector(\"span\");\n            let ovr = null;\n            if (ovrElement) {\n                const ovrText = (_c = ovrElement.textContent) === null || _c === void 0 ? void 0 : _c.trim();\n                ovr = ovrText === \"-\" ? null : parseInt(ovrText || \"0\", 10);\n            }\n            const strengthsElement = cells[3].querySelector(\"span\");\n            const weaknessElement = cells[4].querySelector(\"span\");\n            const strengthsText = strengthsElement\n                ? ((_d = strengthsElement.textContent) === null || _d === void 0 ? void 0 : _d.trim()) || \"\"\n                : \"\";\n            const weaknessText = weaknessElement\n                ? ((_e = weaknessElement.textContent) === null || _e === void 0 ? void 0 : _e.trim()) || \"\"\n                : \"\";\n            const statMap = {\n                Skating: \"SKA\",\n                Endurance: \"END\",\n                Power: \"PWR\",\n                Shooting: \"SHO\",\n                Passing: \"PAS\",\n                Defending: \"DEF\",\n                Checking: \"CHK\",\n                Discipline: \"DSC\",\n                Faceoffs: \"FOF\",\n                Reflexes: \"REF\",\n                Positioning: \"POS\",\n                Pads: \"PAD\",\n                Glove: \"GLO\",\n                Blocker: \"BLO\",\n                Stick: \"STK\",\n            };\n            const strengths = strengthsText\n                .split(\"|\")\n                .map((s) => statMap[s.trim()])\n                .filter(Boolean);\n            const weakness = statMap[weaknessText.trim()] || \"\";\n            const statsToTrack = getStatsForPosition(position);\n            const stats = {};\n            statsToTrack.forEach((stat) => {\n                var _a;\n                let cellIndex;\n                switch (stat) {\n                    case \"SKA\":\n                        cellIndex = 18;\n                        break;\n                    case \"END\":\n                        cellIndex = 19;\n                        break;\n                    case \"PWR\":\n                        cellIndex = 20;\n                        break;\n                    case \"SHO\":\n                        cellIndex = 21;\n                        break;\n                    case \"PAS\":\n                        cellIndex = 22;\n                        break;\n                    case \"DEF\":\n                        cellIndex = 23;\n                        break;\n                    case \"CHK\":\n                        cellIndex = 24;\n                        break;\n                    case \"DSC\":\n                        cellIndex = 25;\n                        break;\n                    case \"FOF\":\n                        cellIndex = 26;\n                        break;\n                    case \"REF\":\n                        cellIndex = 27;\n                        break;\n                    case \"POS\":\n                        cellIndex = 28;\n                        break;\n                    case \"PAD\":\n                        cellIndex = 29;\n                        break;\n                    case \"GLO\":\n                        cellIndex = 30;\n                        break;\n                    case \"BLO\":\n                        cellIndex = 31;\n                        break;\n                    case \"STK\":\n                        cellIndex = 32;\n                        break;\n                    default:\n                        cellIndex = -1;\n                }\n                if (cellIndex !== -1 && cellIndex < cells.length) {\n                    const statElement = cells[cellIndex].querySelector(\"span\");\n                    if (statElement) {\n                        const ratingText = ((_a = statElement.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || \"\";\n                        const rating = ratingText === \"-\" ? 0 : parseInt(ratingText, 10);\n                        const hasRedPuck = statElement.classList.contains(\"maxed\");\n                        stats[stat] = {\n                            rating,\n                            hasRedPuck,\n                            strength: strengths.indexOf(stat) !== -1\n                                ? \"strongest\"\n                                : stat === weakness\n                                    ? \"weakest\"\n                                    : null,\n                        };\n                    }\n                }\n                if (!stats[stat]) {\n                    stats[stat] = {\n                        rating: 0,\n                        hasRedPuck: false,\n                        strength: null,\n                    };\n                }\n            });\n            const [minStats, maxStats] = yield Promise.all([\n                calculateMinStatsAsync(stats),\n                calculateMaxStatsAsync(stats),\n            ]);\n            const [minOvr, maxOvr] = yield Promise.all([\n                calculateOVRAsync(minStats),\n                calculateOVRAsync(maxStats),\n            ]);\n            return {\n                id,\n                name,\n                position,\n                ovr,\n                minOvr,\n                maxOvr,\n                stats,\n            };\n        });\n        const playerPromises = Array.from(rows).map(extractPlayerData);\n        const players = yield Promise.all(playerPromises);\n        console.log(\"Extracted players:\", players);\n        // After extracting and processing all player data, reset user preferences\n        parsePreferencesTable(savedPreferencesGrid);\n        return players;\n    });\n}\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"parseStatsTable\") {\n        if (!parseStatsTable()) {\n            const interval = setInterval(() => {\n                if (parseStatsTable()) {\n                    clearInterval(interval);\n                }\n            }, 100); // 0.1 Seconds\n            setTimeout(() => {\n                clearInterval(interval);\n            }, 10000); // 10 Seconds\n        }\n    }\n    else if (message.action === \"parseDraftTable\") {\n        if (parseDraftCompleted)\n            return;\n        if (!parseDraftTable()) {\n            const interval = setInterval(() => {\n                if (parseDraftTable()) {\n                    clearInterval(interval);\n                }\n            }, 100); // 0.1 Seconds\n            setTimeout(() => {\n                clearInterval(interval);\n            }, 10000); // 10 Seconds\n        }\n    }\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/contentScript.ts\"]();\n",""],"names":[],"sourceRoot":""}