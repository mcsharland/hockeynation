{"version":3,"file":"contentScript.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,4CAA4C;AAC5C;AACA,+CAA+C;AAC/C,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA,CAAC","sources":["webpack://hockeynation/./src/contentScript.ts"],"sourcesContent":["\"use strict\";\nconst calculateOVR = (stats) => {\n    const statsValues = Object.keys(stats).map((key) => stats[key]);\n    const sum = statsValues.reduce((acc, stat) => acc + stat.rating, 0);\n    const avg = sum / statsValues.length;\n    let excess = 0;\n    for (const stat of statsValues) {\n        if (stat.rating > avg) {\n            excess += stat.rating - avg;\n        }\n    }\n    const correctedSum = sum + excess;\n    const correctedAverage = correctedSum / statsValues.length;\n    const ovr = Math.round(correctedAverage * 10);\n    return ovr;\n};\nconst parseStatsTable = () => {\n    // Find a puck SVG and traverse up to find the table\n    const puck = document.querySelector(\"svg.fa-hockey-puck\");\n    if (!puck) {\n        return false;\n    }\n    let ancestor = puck.parentElement;\n    while (ancestor && !ancestor.matches(\"table[data-v-a81c915e]\")) {\n        ancestor = ancestor.parentElement;\n    }\n    const statsTable = ancestor;\n    if (!statsTable) {\n        return false;\n    }\n    // Select all div elements with the specific class name\n    const divs = document.querySelectorAll(\"div.card-header\");\n    const updateOVR = (ovr) => {\n        var _a;\n        const ovrElement = document.querySelector(\"div.polygon.select-none text\");\n        if (ovrElement) {\n            ovrElement.textContent = ovr.toString();\n            const polygonElement = (_a = ovrElement.parentElement) === null || _a === void 0 ? void 0 : _a.querySelector(\"polygon\");\n            if (polygonElement) {\n                let fillColor = \"\";\n                if (ovr <= 39) {\n                    fillColor = \"#f56565\";\n                }\n                else if (ovr >= 40 && ovr <= 54) {\n                    fillColor = \"#ed8936\";\n                }\n                else if (ovr >= 55 && ovr <= 69) {\n                    fillColor = \"#1995AD\";\n                }\n                else if (ovr >= 70 && ovr <= 79) {\n                    fillColor = \"#10b981\";\n                }\n                else if (ovr >= 80) {\n                    fillColor = \"#383839\";\n                }\n                polygonElement.setAttribute(\"fill\", fillColor);\n            }\n        }\n    };\n    const updateHockeyPucks = (option) => {\n        statsRows.forEach((row) => {\n            var _a, _b;\n            const statName = ((_b = (_a = row.cells[0]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\";\n            const pucksCell = row.cells[1];\n            const pucks = pucksCell.querySelectorAll(\"svg.fa-hockey-puck\");\n            const ratingCell = row.cells[2]; // Select the third <td> element\n            const ratingSpan = ratingCell === null || ratingCell === void 0 ? void 0 : ratingCell.querySelector(\"span\"); // Find the span element within the third <td>\n            const stat = stats[statName];\n            if (stat) {\n                let rating = stat.rating;\n                if (option === \"Min\") {\n                    rating = minStats[statName].rating;\n                }\n                else if (option === \"Max\") {\n                    rating = maxStats[statName].rating;\n                }\n                pucks.forEach((puck, index) => {\n                    puck.classList.remove(\"text-blue-400\");\n                    if (index < rating) {\n                        puck.classList.remove(\"text-gray-300\");\n                        if (index >= stat.rating) {\n                            puck.classList.add(\"text-blue-400\");\n                        }\n                    }\n                    else {\n                        puck.classList.add(\"text-gray-300\");\n                    }\n                    if (index === rating - 1 && stat.hasRedPuck) {\n                        puck.classList.add(\"max-level\");\n                    }\n                    else {\n                        puck.classList.remove(\"max-level\");\n                    }\n                });\n                // Update the rating value in the span element\n                if (ratingSpan) {\n                    ratingSpan.textContent = `(${rating})`;\n                }\n            }\n        });\n        let ovr = calculateOVR(stats);\n        if (option === \"Min\") {\n            ovr = calculateOVR(minStats);\n        }\n        else if (option === \"Max\") {\n            ovr = calculateOVR(maxStats);\n        }\n        updateOVR(ovr);\n    };\n    // Loop through each div element\n    divs.forEach((div) => {\n        // Check if the text content includes 'Skills'\n        if (div.textContent && div.textContent.trim() === \"Skills\") {\n            const dropdown = document.createElement(\"select\");\n            dropdown.classList.add(\"stats-dropdown\");\n            dropdown.style.marginLeft = \"auto\";\n            dropdown.style.fontSize = \"12px\";\n            dropdown.style.padding = \"2px\";\n            dropdown.style.border = \"none\";\n            dropdown.style.backgroundColor = \"#fff\";\n            dropdown.style.color = \"#000\";\n            dropdown.style.width = \"85px\"; // Adjust the width as needed\n            dropdown.style.height = \"18px\"; // Adjust the width as needed\n            dropdown.style.lineHeight = \"18px\";\n            dropdown.style.paddingTop = \"0px\"; // Reduces the padding at the top to push the text up\n            dropdown.style.paddingBottom = \"0px\"; // Adjusts the bottom padding for better control\n            dropdown.style.paddingRight = \"21px\";\n            dropdown.style.borderRadius = \"2px\";\n            dropdown.addEventListener(\"change\", (event) => {\n                const selectElement = event.target;\n                const selectedOption = selectElement.value;\n                updateHockeyPucks(selectedOption);\n            });\n            // Create dropdown options\n            const options = [\"Default\", \"Min\", \"Max\"];\n            options.forEach((option) => {\n                const optionElement = document.createElement(\"option\");\n                optionElement.value = option;\n                optionElement.textContent = option;\n                optionElement.style.textAlign = \"center\";\n                dropdown.appendChild(optionElement);\n            });\n            // Add the dropdown to the banner\n            div.appendChild(dropdown);\n        }\n    });\n    const statsRows = statsTable.querySelectorAll(\"tbody tr\");\n    if (!statsRows.length) {\n        return false;\n    }\n    const stats = {};\n    statsRows.forEach((row) => {\n        var _a, _b, _c, _d;\n        const statName = ((_b = (_a = row.cells[0]) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || \"\";\n        const pucks = row.querySelectorAll(\"svg.fa-hockey-puck\");\n        const ratingText = (_d = (_c = row.cells[row.cells.length - 1]) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.trim();\n        const ratingMatch = ratingText ? ratingText.match(/\\((\\d+)\\)/) : null;\n        const rating = ratingMatch ? parseInt(ratingMatch[1], 10) : 0;\n        const hasRedPuck = Array.from(pucks).some((puck) => puck.classList.contains(\"max-level\"));\n        stats[statName] = {\n            rating,\n            hasRedPuck,\n            strength: null,\n        };\n    });\n    // Process strongest and weakest talents\n    const talentContainer = document.querySelector(\"body\");\n    if (talentContainer) {\n        const talentText = talentContainer.textContent || \"\";\n        const strongestMatch = talentText.match(/Strongest talents of .+ are (\\w+ and \\w+)/);\n        const weakestMatch = talentText.match(/weakest talent is (\\w+)/);\n        const strongestTalents = strongestMatch\n            ? strongestMatch[1].split(\" and \")\n            : [];\n        const weakestTalent = weakestMatch ? weakestMatch[1] : \"\";\n        strongestTalents.forEach((talent) => {\n            if (stats[talent]) {\n                stats[talent].strength = \"strongest\";\n            }\n        });\n        if (weakestTalent && stats[weakestTalent]) {\n            stats[weakestTalent].strength = \"weakest\";\n        }\n    }\n    // Create a deep copy of the stats object for minStats\n    const minStats = JSON.parse(JSON.stringify(stats));\n    let weakestRating = 10;\n    for (const key of Object.keys(minStats)) {\n        const stat = minStats[key];\n        if (stat.strength === \"weakest\") {\n            weakestRating = stat.rating;\n        }\n        minStats[key].rating = stat.hasRedPuck ? stat.rating : stat.rating + 1;\n    }\n    for (const key of Object.keys(minStats)) {\n        if (minStats[key].rating < weakestRating) {\n            minStats[key].rating = weakestRating;\n        }\n    }\n    // Create a deep copy of the stats object for maxStats\n    const maxStats = JSON.parse(JSON.stringify(stats));\n    let strongestRating = 10;\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (stat.strength === \"strongest\") {\n            strongestRating = Math.min(strongestRating, stat.hasRedPuck ? stat.rating : 10);\n        }\n    }\n    for (const key of Object.keys(maxStats)) {\n        const stat = maxStats[key];\n        if (!stat.hasRedPuck && stat.rating < strongestRating) {\n            maxStats[key].rating = strongestRating;\n        }\n    }\n    // Call updateHockeyPucks with the initial selection\n    updateHockeyPucks(\"Default\");\n    return true;\n};\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"parseStatsTable\") {\n        if (!parseStatsTable()) {\n            const interval = setInterval(() => {\n                if (parseStatsTable()) {\n                    clearInterval(interval);\n                }\n            }, 100); // Check every second\n            setTimeout(() => {\n                clearInterval(interval);\n            }, 10000);\n        }\n    }\n});\n"],"names":[],"sourceRoot":""}